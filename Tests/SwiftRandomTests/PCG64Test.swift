//
//  Test.swift
//  SwiftRandom
//
//  Created by Leif Ibsen on 09/10/2024.
//

import XCTest
@testable import SwiftRandom

final class PCG64Test: XCTestCase {
    
    // Test data generated by Python numpy
    
    let stateBytes: Bytes = [
        216, 247, 175, 180, 209, 181, 180, 201, 95, 38, 128, 245, 48, 89, 83, 60, 169, 115, 120, 68, 188, 51, 129, 88, 130, 26, 247, 58, 219, 218, 141, 65]

    let output: [UInt64] = [
         11749869230777074271,  4976686463289251617,   755828109848996024,
           304881062738325533, 15002187965291974971, 16837368535893154894,
         11190454901533422207, 13456836363123071557, 10028111089635196863,
         17249041691996241901, 15049841714506250060,    50516411784532144,
         15816317257914971632,   619544512228201759, 13459767282281468793,
          3240274278364030886, 15922840670408769294,  9988196555773475118,
          5528708540590789176,  7797202992660666097,   522405725871973132,
          2292621794229537384, 12370836947434662824, 11938539287199277755,
         11351851658265912881,  7077601650295773797, 18395276473263912218,
         18093218472855323967, 12646017539498340653, 11998855799682745918,
         12699600647224206780,  7174333972925213103,  2492090653401037754,
         13309110763725718549,  9691076734726793787,  5722952479383703064,
          8962080526328859928, 16408154436914164547, 17230061692552783506,
          6600156424494784668, 10542864517962442193,  5937442282338639597,
         10962900560091666083,  6233361896563643458,  7224095477144916668,
         16422663126820014570,  4190317992309996195, 11495773768049230524,
          1549809541329029871, 15359573496234257596, 14519401039093689935,
          4415586853957397856, 16168280290407227140,  1080389548951534700,
          6200265394693335470,  2772166865342604472,  8307295042895848470,
         14689590013673228975,  4254597801902691692,   959623627116559752,
          7462664253736073131,  3661919327355147708,  1674098206445630176,
         10705243001984662299,  5509971117917422114, 12396117532504645908,
          3680410333634169582, 17378919437999810788,  6735093832321390100,
          1946044423216464364, 11604997066137502855, 17102982757217513103,
          8123524668950463668, 17609086532309083952,  9221450138614817331,
          7844083615406347888, 11440918820399615665, 18356290560718802792,
         17504921111942386499,  8486334947188954216, 13977630086669507101,
          9175829160114866882,  9764085954252175390, 14495187717848137682,
          7649050331730722637, 13548830475130767701, 13118270670118174124,
         17193466500378917481,  2120132871850371088, 13447955290572086403,
         17107951859171531685, 17855086707780737239,   271283443966091747,
         15931347716555558556, 18099853790497043721, 17657411208032999235,
          2744211661031086175, 17941834807307746912, 16416413438470932068,
         15170119529603977013]

    func test1() throws {
        var pcg64 = PCG64()
        pcg64.setState(state: stateBytes)
        for i in 0 ..< output.count {
            XCTAssertEqual(pcg64.nextUInt64(), output[i])
        }
    }
    
    func testAdvance1() throws {
        var pcg1 = PCG64()
        var pcg2 = pcg1
        for _ in 0 ..< 10000 {
            let _ = pcg1.nextUInt64()
        }
        pcg2.advance(n: 10000)
        XCTAssertEqual(pcg1, pcg2)
    }

    func testAdvance2() throws {
        var pcg64 = PCG64()
        let state = pcg64.getState()
        pcg64.advance(n: 0x7fffffffffffffffffffffffffffffff)
        pcg64.advance(n: 0x7fffffffffffffffffffffffffffffff)
        pcg64.advance(n: 2)
        XCTAssertEqual(state, pcg64.getState())
        pcg64.advance(n: 0xffffffffffffffffffffffffffffffff)
        pcg64.advance(n: 1)
        XCTAssertEqual(state, pcg64.getState())
        pcg64.advance(n: 0)
        XCTAssertEqual(state, pcg64.getState())
    }
    
    func testAdvance3() throws {
        var pcg1 = PCG64()
        var pcg2 = pcg1
        pcg1.advance(n: 100000)
        pcg2.advance(n: 100000)
        XCTAssertEqual(pcg1, pcg2)
    }

    func test32() throws {
        var pcg64 = PCG64()
        let state = pcg64.getState()
        let x64 = pcg64.nextUInt64()
        pcg64.setState(state: state)
        let x32 = pcg64.nextUInt32()
        XCTAssertEqual(UInt32(x64 & 0xffffffff), x32)
    }
    
}
